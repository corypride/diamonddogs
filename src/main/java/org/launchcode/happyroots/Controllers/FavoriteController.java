package org.launchcode.happyroots.Controllers;


import org.launchcode.happyroots.Models.Favorite;
import org.launchcode.happyroots.Repositories.FavoriteRepository;
import org.launchcode.happyroots.Service.FavoriteService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;


@RestController
@CrossOrigin("http://localhost:3000/")
@RequestMapping("/favorites")
public class FavoriteController {

    @Autowired
    FavoriteService favoriteService;

    @Autowired
    FavoriteRepository favoriteRepository;

    @GetMapping("/")
    public String getAll() {
        return favoriteService.findAllFavorites().toString();
//        return "favorites get";
    }

    @PostMapping("/huh")
    public String postTest(Favorite favorite) {
        return "success";

    }

//    @ResponseBody
//    @GetMapping("/{id}")
//    public String getUserById(@RequestBody String id ) {
////        return favoriteRepository.findById(Integer.valueOf(id));
//        return id;
//    }


    @ResponseBody
    @GetMapping("/id")
    public Optional<Favorite> getUserFavorites(@RequestBody int id) {
        return favoriteRepository.findById(id);
    }


//    @ResponseBody
//    @GetMapping("/userId")
//    public Optional<Favorite> getUserFavorites(@RequestBody String userId) {
//        return favoriteRepository.findById(id);
//    }


//    @GetMapping("/find")
//    public String getName (Model model, @RequestParam String name) {
//        model.addAttribute(favoriteService.findByName(name));
//        return ;
//
//    }

    @GetMapping
    @ResponseBody
    public List<Favorite> findALlFavorites () {
        return favoriteService.findAllFavorites();
//        return List.of();
    }


//    @GetMapping(path="/allfavorites")
//    public @ResponseBody Iterable<Favorite> getAllFavorites() {
//        // This returns a JSON or XML with the users
//        return favoriteService.findAllFavorites();
//    }


    @GetMapping(path="/all")
    public @ResponseBody Iterable<Favorite> findAll() {
        // This returns a JSON or XML with the users
        return favoriteRepository.findAll();
    }




    @PostMapping("/add")
    public String addFavorite(Model model, @RequestParam String name, @RequestParam String userId){
//        favoriteService.addFavorite(new Favorite());
//        model.addAttribute(new Favorite());
        model.addAttribute("name", name);
        model.addAttribute("userId", userId);
//        favoriteRepository.save();
//        return favoriteService.addFavorite(favorite);
        return "added";
    }








//    @PostMapping("/add")
//    public @ResponseBody String addFavorite (@RequestParam String name,
//                                             @RequestParam String userId) {
//        Favorite n = new Favorite();
//        n.setName(name);
//        n.setUserId(userId);
//        favoriteRepository.save(n);
//        return "Saved";
//    }

    //    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }

//    public String processAddEmployerForm(@ModelAttribute @Valid Favorite newFavorite,
//                                         Errors errors, Model model) {
//
//        favoriteRepository.save(newFavorite);
//        return favoriteService.findAllFavorites().toString();
//    }


    @PostMapping("/")
    public String saveToDB () {

        return "please route me for posting";
    }



}


//
//@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
//public class MainController {
//    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
//    private UserRepository userRepository;
//
//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String name
//            , @RequestParam String email) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        User n = new User();
//        n.setName(name);
//        n.setEmail(email);
//        userRepository.save(n);
//        return "Saved";
//    }
//
//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }
//}